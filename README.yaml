#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform vpc

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: git@github.com:slovink/terraform-aws-vpc.git


# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v1.7.0-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "https://github.com/slovink/terraform-aws-vpc/blob/main/LICENSE"
  - name: "tfsec"
    image: "https://github.com/slovink/terraform-aws-vpc/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/slovink/terraform-aws-vpc/tree/main/.github/workflows/tfsec.yml"



#  description of this project
description: |-
  This terraform module is designed to generate consistent label names and tags for resources. You can use terraform-vpc to implement a strict naming convention.


# extra content
include:
  - "terraform.md"
# How to use this project
usage : |-

  ### Simple Example

  ```hcl
      module "kms_key" {
      source                  = "./../../"
      name                    = "kms"
      environment             = "test"
      deletion_window_in_days = 7
      alias                   = "alias/cloudtrail_Name"
      kms_key_enabled         = true
      multi_region            = true
      valid_to                = "2023-11-21T23:20:50Z"
      policy                  = data.aws_iam_policy_document.default.json
    }

      data "aws_caller_identity" "current" {}
      data "aws_partition" "current" {}

      data "aws_iam_policy_document" "default" {
      version = "2012-10-17"
      statement {
      sid    = "Enable IAM User Permissions"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions   = ["kms:*"]
      resources = ["*"]
      }
      statement {
      sid    = "Allow CloudTrail to encrypt logs"
      effect = "Allow"
      principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
      }
      actions   = ["kms:GenerateDataKey*"]
      resources = ["*"]
      condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:XXXXXXXXXXXX:trail/*"]
      }
      }

      statement {
      sid    = "Allow CloudTrail to describe key"
      effect = "Allow"
      principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
      }
      actions   = ["kms:DescribeKey"]
      resources = ["*"]
      }

      statement {
      sid    = "Allow principals in the account to decrypt log files"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions = [
      "kms:Decrypt",
      "kms:ReEncryptFrom"
      ]
      resources = ["*"]
      condition {
      test     = "StringEquals"
      variable = "kms:CallerAccount"
      values = [
      "XXXXXXXXXXXX"]
      }
      condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:XXXXXXXXXXXX:trail/*"]
      }
      }

      statement {
      sid    = "Allow alias creation during setup"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions   = ["kms:CreateAlias"]
      resources = ["*"]
      }
    }
  ```

  ### kms-key-external Example

  ```hcl
      module "kms_key" {
      source                  = "./../../"
      name                    = "kms"
      environment             = "test"
      deletion_window_in_days = 7
      alias                   = "alias/external_key"
      kms_key_enabled         = false
      enabled                 = true
      multi_region            = true
      create_external_enabled = true
      valid_to                = "2023-11-21T23:20:50Z"
      key_material_base64     = "WblXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
      policy                  = data.aws_iam_policy_document.default.json
    }

      data "aws_caller_identity" "current" {}
      data "aws_partition" "current" {}

      data "aws_iam_policy_document" "default" {
      version = "2012-10-17"
      statement {
      sid    = "Enable IAM User Permissions"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions   = ["kms:*"]
      resources = ["*"]
      }
      statement {
      sid    = "Allow CloudTrail to encrypt logs"
      effect = "Allow"
      principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
      }
      actions   = ["kms:GenerateDataKey*"]
      resources = ["*"]
      condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:XXXXXXXXXXXX:trail/*"]
      }
      }

      statement {
      sid    = "Allow CloudTrail to describe key"
      effect = "Allow"
      principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
      }
      actions   = ["kms:DescribeKey"]
      resources = ["*"]
      }

      statement {
      sid    = "Allow principals in the account to decrypt log files"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions = [
      "kms:Decrypt",
      "kms:ReEncryptFrom"
      ]
      resources = ["*"]
      condition {
      test     = "StringEquals"
      variable = "kms:CallerAccount"
      values = [
      "XXXXXXXXXXXX"]
      }
      condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:XXXXXXXXXXXX:trail/*"]
      }
      }

      statement {
      sid    = "Allow alias creation during setup"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions   = ["kms:CreateAlias"]
      resources = ["*"]
      }
    }
  ```
  ### kms-key-replica Example

  ```hcl
    module "kms_key" {
    source                  = "./../../"
    name                    = "kms"
    environment             = "test"
    deletion_window_in_days = 7
    alias                   = "alias/replicate_key"
    kms_key_enabled         = false
    create_replica_enabled  = true
    enabled                 = true
    multi_region            = false
    primary_key_arn         = "arn:aws:kms:xxxxxxxxxxxxxxxxxxxxx"
    policy                  = data.aws_iam_policy_document.default.json
    }

      data "aws_caller_identity" "current" {}
      data "aws_partition" "current" {}

      data "aws_iam_policy_document" "default" {
      version = "2012-10-17"
      statement {
      sid    = "Enable IAM User Permissions"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions   = ["kms:*"]
      resources = ["*"]
      }
      statement {
      sid    = "Allow CloudTrail to encrypt logs"
      effect = "Allow"
      principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
      }
      actions   = ["kms:GenerateDataKey*"]
      resources = ["*"]
      condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:XXXXXXXXXXXX:trail/*"]
      }
      }

      statement {
      sid    = "Allow CloudTrail to describe key"
      effect = "Allow"
      principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
      }
      actions   = ["kms:DescribeKey"]
      resources = ["*"]
      }

      statement {
      sid    = "Allow principals in the account to decrypt log files"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions = [
      "kms:Decrypt",
      "kms:ReEncryptFrom"
      ]
      resources = ["*"]
      condition {
      test     = "StringEquals"
      variable = "kms:CallerAccount"
      values = [
      "XXXXXXXXXXXX"]
      }
      condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:XXXXXXXXXXXX:trail/*"]
      }
      }

      statement {
      sid    = "Allow alias creation during setup"
      effect = "Allow"
      principals {
      type = "AWS"
      identifiers = [
      format(
      "arn:%s:iam::%s:root",
      join("", data.aws_partition.current[*].partition),
      data.aws_caller_identity.current.account_id
      )
      ]
      }
      actions   = ["kms:CreateAlias"]
      resources = ["*"]
      }
    }
  ```

